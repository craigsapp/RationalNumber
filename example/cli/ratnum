#!/usr/bin/env node
//
// Programmer:    Craig Stuart Sapp <craig@ccrma.stanford.edu>
// Creation Date: Fri Jan  2 04:31:23 PST 2015
// Last Modified: Mon Jan  5 10:17:30 PST 2015
// Filename:      .../example/cli/ratnum
// Syntax:        JavaScript 1.8.5/ECMAScript 5.1; node.js
// vim:           ts=3: ft=javascript
//
// Description:   Example command-line interface for the RationalNumber
//                object. This program will reduce fractions given as
//                program arguments, as well as convert them to floating-point 
//                values (with -f option), convert them to mixed fractions
//                (with -x option), and perform addition (-a), 
//                multiplication (-m), subtraction (-s), and division (-d).
//
// Usage:         ./ratnum [-x|-f] [-asmd] num1 [num2 [[num3] ... ]]
//
// Examples:
//    Reduce a fraction:
//       ./ratnum 2/6
//       --> 1/3
//    Reduce two fractions:
//       ./ratnum 2/6 10/5
//       --> 1/3
//           2
//    Add two fractions:
//       ./ratnum -a 2/6 10/5
//       --> 7/3
//    Add two fractions, mixed fraction form:
//       ./ratnum -ax 2/6 10/5
//       --> 2+1/3
//    Add two fractions, floating-point form:
//       ./ratnum -af 2/6 10/5
//       --> 2.3333333333333335
//    Subtract two fractions:
//       ./ratnum -s 1/2 1/3
//       --> 1/6
//    Multiply three fractions
//       ./ratnum -m 1/2 11/3 9/11
//       --> 3/2
//    Divide two fractions
//       ./ratnum -d 3/5 7/12
//       --> 3/2
//
// If the above examples do not run, then try something like this on the
// command line to set the location of the required modules:
//    export NODE_PATH = /usr/local/lib/node_modules
//

'use strict';

var rat  = require('rational-number');   // Rational number interface.
                                         // Install with the command:
                                         //    npm install rational-number -g
var pap  = require('posix-argv-parser'); // Command line options interface.
                                         // Install with the command:
                                         //    npm install posix-argv-parser -g

//////////////////////////////
//
// Process command-line arguments, then read data from files or standard
//  input if no files.
//

(function processCommandLineArguments() {
	var args = pap.create();
	var v  = pap.validators;
	args.createOption(['-a', '--add']);
	args.createOption(['-s', '--subtract']);
	args.createOption(['-m', '--multiply']);
	args.createOption(['-d', '--divide']);
	args.createOption(['-x', '--mixed']);
	args.createOption(['-f', '--float']);

	args.createOperand('numbers', {
		signature: 'rational numbers',
		greedy: true,
		validators: [v.required()]
	});

	args.parse(process.argv.slice(2), function (errors, options) {
		if (errors) {
			console.log(errors[0]);
			process.exit(1);
		}
		var myoptions = {
			add      : options['-a'].isSet,
			subtract : options['-s'].isSet,
			multiply : options['-m'].isSet,
			divide   : options['-d'].isSet,
			mixed    : options['-x'].isSet,
			float    : options['-f'].isSet,
			numbers  : options.numbers.value
		};
		runCommand(myoptions);
	});
})();



//////////////////////////////
//
// Do all of the work after command-line arguments have been processed.
//

function runCommand(options) {
	var numbers = [];
	var num;
	var result;
	for (var i=0; i<options.numbers.length; i++) {
		num = new rat(options.numbers[i]);
		numbers.push(num);
	}

	if (options.add) {
		// result = numbers[0].add.apply(numbers[0],numbers.slice(1));
		result = numbers[0].add(numbers.slice(1));
	} else if (options.subtract) {
		result = numbers[0].subtract.apply(numbers[0],numbers.slice(1));
	} else if (options.multiply) {
		result = numbers[0].multiply.apply(numbers[0],numbers.slice(1));
	} else if (options.divide) {
		result = numbers[0].divide.apply(numbers[0],numbers.slice(1));
	} else {
		for (i=0; i<numbers.length; i++) {
			printNumber(numbers[i], options);
		}
	}
	if (typeof result !== 'undefined') {
		printNumber(result, options);
	}
}


function printNumber(number, options) {
	if (options.mixed) {
		console.log(number.toStringMixed());
	} else if (options.float) {
		console.log(number.valueOf());
	} else {
		console.log(number.toString());
	}
}



