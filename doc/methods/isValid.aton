
@@BEGIN:	FunctionDocumentation
@OBJECT:	RationalNumber
@METHOD:	isValid
@PARAMETERS:	none
@PROTOTYPE:	yes
@FILE:		RationalNumber-base.js
@SEEALSO:	isSafe
@SEEALSO:	isInfinite
@SEEALSO:	isNaN
@SHORTDESC:	Returns true if safe, finite and not NaN.
@LONGDESC:	Returns true if safe, finite, and not a NaN.  "Safe"
		means that neither the numerator nor denominator are
		larger than 2<sup>53</sup>&ndash;1, which is the largest
		integer that is representable in JavaScript.  Finite means
		that the denominator is not zero, and not being NaN means
		that the numerator and denominator are not both 0.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@BEGIN: EXAMPLE

@DESCRIPTION: Check if a finite number is valid.

@CODE:
var rn = new RationalNumber('174/123521');
rn.isValid();

@OUTPUT:
true

@@END:	EXAMPLE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@BEGIN: EXAMPLE

@DESCRIPTION: Check if infinity is valid.

@CODE:
var rn = new RationalNumber('Infinity');
rn.isValid();

@OUTPUT:
false

@@END:	EXAMPLE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@BEGIN: EXAMPLE

@DESCRIPTION: Check if an unsafe number is valid.

@CODE:
var rn = new RationalNumber(Math.pow(2, 53));
rn.isValid();

@OUTPUT:
false

@@END:	EXAMPLE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@END:	FunctionDocumentation


