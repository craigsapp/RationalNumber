
@@BEGIN:	FunctionDocumentation
@OBJECT:	RationalNumber
@METHOD:	isSafe
@PARAMETERS:	none
@PROTOTYPE:	yes
@FILE:		RationalNumber-base.js
@SEEALSO:	checkOverflow
@SHORTDESC:	Numerator and denominator less than 2<sup>53</sup>.
@LONGDESC:	Fractions can only be represented in the RationalNumber
		class properly when the numerator is in the range
		from &ndash;(2<sup>53</sup>&ndash;1) to
		(2<sup>53</sup>&ndash;1) and the denominator in the
		range from 0 to (2<sup>53</sup>&ndash;1).  If the
		numbers are out of that range, then the fraction
		cannot be expected to be valid.  When doing arithmetic
		with RationalNumbers, you should check if the
		RationalNumbers are safe after each operation if
		you want to guarantee that the final result is
		valid; otherwise, it is possible that the final
		result is safe but an intermediate value was not,
		so the final result will be garbage.

		<p style="margin:0; text-indent:20px;"> The RationalNumber object is not intended to be
		used with very large numerators or denominators,
		so the arithmetic methods do not check safeness
		when processing numbers by default.  See the
		checkOverflowOn() function for monitoring overflows
		in the numerator or denominator values.

		<p style="margin:0; text-indent:20px;"> There is no reason for the denominator to be negative
		so its sign is always ignored when setting it.
		Setting the denominator to zero will cause an
		Infinite number which is considered "safe", but see
		isValid() which does not like Infinities or NaNs
		generated by safe integers.  Note that Infinity =
		1/0, &ndash;Infinity = &ndash;1/0, and Nan = 0/0
		are safe numbers since they can be represented by
		the integers 0 and 1.  Use isNan() and isInfinite()
		to check those specific values, or isValid() to
		check that the number is safe, and not infinite and
		not Nan.

		Internally the numerator is always stored as a
		non-negative number, so the safety check only check
		that its range is from 0 to 2<sup>53</sup>&ndash;1.
		If you set this._n to any negative number, then it
		is your fault, and the RationalNumber is identified
		as "unsafe".

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@BEGIN: EXAMPLE

@DESCRIPTION: Catch an unsafe rational number.

@BRIEFCODE:
var rn = new RationalNumber();
rn.setDenominatorAbsoluteValueNoReduce(Math.pow(2, 53));
rn.isSafe();

@BRIEFOUTPUT:
false

@@END:	EXAMPLE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@BEGIN: EXAMPLE

@DESCRIPTION: Catch an unsafe rational number.

@BRIEFCODE:
var rn = new RationalNumber();
rn.setDenominatorAbsoluteValueNoReduce(Math.pow(2, 53));
rn.isSafe();

@BRIEFOUTPUT:
false

@@END:	EXAMPLE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@END:	FunctionDocumentation



